# 方針
- メッセージを送ると、そのメッセージが返ってくる ok
 練習
 chatGPTなどを使って良い
 1, jsonで、message1とmessage2を送る(curlで)。すると、message1とmessage2が合体された形で返ってくる
 例:
    これを投げたら、curl -X POST localhost:5765/api/message -H "Content-Type: application/json" -d "{\"message1\":\"Hello\", \"message2\":\"World\"}"
    返ってくるのがこれならOK {"message":"HelloWorld"}

    curl -X POST localhost:5765/api/message -H "Content-Type: application/json" -d "{\"message1\":\"Ocha\", \"message2\":\"おいしい\"}"
    response {"message":"Ochaおいしい"}
 
 課題
    - dockerについて調べておく
    - user_idとmessageを受け取り、"user_idからmessageが来ました"という返信をするエンドポイントを作成

    -DB mysql　について調べる　仮想化技術
    -webに関する知識　


   curl -X POST localhost:5765/api/message2 -H "Content-Type: application/json" -d "{\"user_id\":\"User012\", \"message\":\"うまくいってますか？\"}" 
   {"result":"User012からうまくいっていますかが来ました"}

- メッセージを送ると、そのメッセージがDBに保存される
   - dockerで、DBを立てる ok
   - dockerに立てたDBとrustのバックエンドを接続する ok
   - 保存する処理をかく

   sea_ormについて調べる sqlをプログラムで簡単にかけるようにするクレート
   引き続き、webに関する知識をつける

   sea_ormを使うために、DBの情報をsea_ormに認識させる(Entityを定義)
   infrastructure層に保存処理を書く
   実際に保存してみる

   DBに保存される

   - clean architectureについて調べる
   - ソフトウェアアーキテクチャとは何か
   - debug　messeage が?????に変換される問題をGPT等を用いて解決する
   
- メッセージを送ると、メッセージが暗号化されて保存される

- 通信相手は、暗号化されたメッセージを見れる
- 通信相手は、暗号化されたメッセージを復号化して見れる

curl -X POST localhost:5765/api/message -H "Content-Type: application/json" -d "{\"message1\":\"テスト\"}"
↓　こっち
C:\Users\yutak\Develop\message_backend>curl -X POST localhost:8090/api/message -H "Content-Type: application/json" -d "{\"message1\":\"テスト\"}"

　docker-compose up or down でコンテナを追加、破棄

main.rs  起点　→ cargo run 起動する
　→router
message1 の
C:\Users\yutak\Develop\message_backend>curl -X POST localhost:8090/api/message -H "Content-Type: application/json" -d "{\"message1\":\"テスト\"}"
の流れを説明する。
　


# dockerで立てたコンテナに入る
- docker ps
- docker exec -it **** bash (コンテナの中に入る)
- mysql -u user -p (mysql を起動する)
- passwordを入力
- show databases;
- use database_name;
- show tables;
- select * from messages;
- 抜け出すにはexit;

　3つのターミナルが必要
   dockerを起動
   別のターミナルでコンテナに入る
   別のターミナルでrustを起動（cargo run）

デバッグ
　切り離しが大切　保存がうまくいかないならどこのタイミングで上手くいっていないのかを確認する。

